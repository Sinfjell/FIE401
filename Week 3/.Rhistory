print("SMB has significantly different returns from zero.")
} else {
print("SMB does not have significantly different returns from zero.")
}
# Compute t-statistics for mkt
t_stat_mkt <- (mean(subset_data$mkt.rf) / sd(subset_data$mkt.rf)) * sqrt(length(subset_data$mkt.rf))
print(paste("t-statistic for mkt: ", t_stat_mkt))
# Interpretation: If t_stat_mkt is greater than 1.96 or less than -1.96, mkt has significantly positive/negative returns
if (abs(t_stat_mkt) > 1.96) {
print("Market has significantly different returns from zero.")
} else {
print("Market does not have significantly different returns from zero.")
}
# Compute t-statistics for HML
t_stat_hml <- (mean(subset_data$hml) / sd(subset_data$hml)) * sqrt(length(subset_data$hml))
print(paste("t-statistic for HML: ", t_stat_hml))
# Interpretation: If t_stat_hml is greater than 1.96 or less than -1.96, HML has significantly positive/negative returns
if (abs(t_stat_hml) > 1.96) {
print("HML has significantly different returns from zero.")
} else {
print("HML does not have significantly different returns from zero.")
}
# Summary statistics
summary(subset_data[, c("smb", "mkt.rf", "hml")])
# Histograms
hist(subset_data$smb, main="Histogram of SMB", xlab="SMB")
hist(subset_data$mkt.rf, main="Histogram of Market Returns", xlab="Market Returns")
hist(subset_data$hml, main="Histogram of HML", xlab="HML")
# Task 6 ------------------------------------------------------------------
# Extract the year from the date, add it to factor_returns
factor_returns$year <- substr(factor_returns$date, 1, 4)
# Initialize an empty data frame to store the results
results <- data.frame(Year=integer(), Mean_SMB=numeric(), SD_SMB=numeric())
for (year in 2000:2005) {
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == as.character(year))
# Save the subset data to a variable
data_for_year <- subset_data_year
print(paste("Processing year:", year))
print(paste("Number of rows:", nrow(data_for_year)))
mean_smb <- mean(data_for_year$smb, na.rm = TRUE)
sd_smb <- sd(data_for_year$smb, na.rm = TRUE)
print(paste("Computed mean_smb for year ", year, ": ", mean_smb))
print(paste("Computed sd_smb for year ", year, ": ", sd_smb))
# Add the results to the results data frame
results <- rbind(results, data.frame(Year=year, Mean_SMB=mean_smb, SD_SMB=sd_smb))
}
# Display the results data frame
print(results)
View(factor_returns)
View(factor_returns)
# Load the required libraries
library(dplyr)
# Read the data
factor_returns <- read.csv("factor_returns.csv")
# Add a year column
factor_returns$year <- substr(factor_returns$date, 1, 4)
# Initialize an empty data frame to store the results
results <- data.frame(Year=integer(), Mean_SMB=numeric(), SD_SMB=numeric())
# Loop over the years
for (year in 2000:2005) {
# Subset the data for the current year
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == year)
# Save the subset data to a variable
data_for_year <- subset_data_year
# Calculate the mean and standard deviation of SMB
mean_smb <- mean(data_for_year$smb, na.rm = TRUE)
sd_smb <- sd(data_for_year$smb, na.rm = TRUE)
# Add the results to the results data frame
results <- rbind(results, data.frame(Year=year, Mean_SMB=mean_smb, SD_SMB=sd_smb))
}
# Print the results data frame
print(results)
rm(list = ls())
# Read the data
factor_returns <- read.csv("factor_returns.csv")
View(factor_returns)
View(factor_returns)
# Add a year column
factor_returns$year <- substr(factor_returns$date, 1, 4)
# Subset the data for the current year
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == year)
View(subset_data_year)
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == 2000)
View(subset_data_year)
View(subset_data_year)
# Load the required libraries
library(dplyr)
# Read the data
factor_returns <- read.csv("factor_returns.csv")
# Add a year column
factor_returns$year <- substr(factor_returns$date, 1, 4)
# Initialize an empty data frame to store the results
results <- data.frame(Year=integer(), Mean_SMB=numeric(), SD_SMB=numeric())
# Loop over the years
for (year in 2000:2005) {
# Subset the data for the current year
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == year)
# Save the subset data to a variable
data_for_year <- subset_data_year
# Calculate the mean and standard deviation of SMB
mean_smb <- mean(data_for_year$smb, na.rm = TRUE)
sd_smb <- sd(data_for_year$smb, na.rm = TRUE)
# Add the results to the results data frame
results <- rbind(results, data.frame(Year=year, Mean_SMB=mean_smb, SD_SMB=sd_smb))
}
# Print the results data frame
print(results)
# Load the required libraries
library(dplyr)
# Read the data
factor_returns <- read.csv("factor_returns.csv")
# Add a year column
factor_returns$year <- substr(factor_returns$date, 1, 4)
# Initialize an empty data frame to store the results
results <- data.frame(Year=integer(), Mean_SMB=numeric(), SD_SMB=numeric())
# Loop over the years
for (year in 2000:2005) {
# Subset the data for the current year
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == year)
# Extract the SMB column
smb_data_year <- subset_data_year$smb
# Calculate the mean and standard deviation of SMB
mean_smb <- mean(smb_data_year, na.rm = TRUE)
sd_smb <- sd(smb_data_year, na.rm = TRUE)
# Add the results to the results data frame
results <- rbind(results, data.frame(Year=year, Mean_SMB=mean_smb, SD_SMB=sd_smb))
}
# Print the results data frame
print(results)
# Load the required libraries
library(dplyr)
# Read the data
factor_returns <- read.csv("factor_returns.csv")
# Add a year column
factor_returns$year <- substr(factor_returns$date, 1, 4)
# Initialize an empty data frame to store the results
results <- data.frame(Year=integer(), Mean_SMB=numeric(), SD_SMB=numeric())
# Loop over the years
for (year in 2000:2005) {
# Subset the data for the current year
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == year)
# Extract the SMB column
smb_data_year <- subset_data_year$smb
# Calculate the mean and standard deviation of SMB
mean_smb <- mean(smb_data_year, na.rm = TRUE)
sd_smb <- sd(smb_data_year, na.rm = TRUE)
# Add the results to the results data frame
results <- rbind(results, data.frame(Year=year, Mean_SMB=mean_smb, SD_SMB=sd_smb))
}
# Print the results data frame
print(results)
# Task 1: First steps
setwd("~/Documents/Financial Econometrics")
# Task 1: First steps
setwd("/Users/sinfjell/Library/CloudStorage/OneDrive-NorgesHandelshøyskole/FIE401/Github")
library(plm)
X <- rnorm(100)
Y <- rnorm(100)
ls()
plot(X, Y)
rm(X, Y)
# Task 2: Data objects and structures
numbers <- 1:100
df <- data.frame(digits = numbers, year = 1843, text = "Some characters")
# Task 3: Import, export, and save data
factor_returns <- read.csv("factor_returns.csv")
save(factor_returns, file = "factor_returns.RData")
write.table(factor_returns, file = "factor_returns.txt", sep = "\t")
list.files()
# Task 4: Analysis of profitability
mkt <- factor_returns$mkt.rf + factor_returns$rf
t_stat_mkt <- mean(mkt) / sd(mkt) * sqrt(length(mkt))
print(t_stat_mkt)
t_stat_mkt.rf <- mean(factor_returns$mkt.rf) / sd(factor_returns$mkt.rf) * sqrt(length(factor_returns$mkt.rf))
print(t_stat_mkt.rf)
t_stat_SMB <- mean(factor_returns$SMB) / sd(factor_returns$SMB) * sqrt(length(factor_returns$SMB))
print(t_stat_SMB)
t_stat_HML <- mean(factor_returns$HML) / sd(factor_returns$HML) * sqrt(length(factor_returns$HML))
print(t_stat_HML)
# Task 5: Manipulation
recent_SMB <- factor_returns$SMB[factor_returns$Date > "2000-01-01"]
t_stat_recent_SMB <- mean(recent_SMB) / sd(recent_SMB) * sqrt(length(recent_SMB))
print(t_stat_recent_SMB)
summary(recent_SMB)
hist(recent_SMB)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
factor_returns <- read.csv("factor_returns.csv")
# Get the year
year <- factor_returns$Date %>%
substr(1, 4)
# Calculate mean and standard deviation of SMB for each year
mean_SMB <- sapply(year, function(y) {
mean(factor_returns$SMB[factor_returns$Date > y])
})
sd_SMB <- sapply(year, function(y) {
sd(factor_returns$SMB[factor_returns$Date > y])
})
# Print the results
data.frame(year, mean_SMB, sd_SMB)
library(tidyverse)
factor_returns <- read.csv("factor_returns.csv")
# Get the year
year <- factor_returns$Date %>%
substr(1, 4)
# Calculate mean and standard deviation of SMB for each year
mean_SMB <- sapply(year, function(y) {
mean(factor_returns$SMB[factor_returns$Date > y])
})
sd_SMB <- sapply(year, function(y) {
sd(factor_returns$SMB[factor_returns$Date > y])
})
# Print the results
data.frame(year, mean_SMB, sd_SMB)
library(tidyverse)
factor_returns <- read.csv("factor_returns.csv")
# Get the year
year <- factor_returns$Date %>%
substr(1, 4)
# Calculate mean and standard deviation of SMB for each year
mean_SMB <- sapply(year, function(y) {
ifelse(y < 2000, NA, mean(factor_returns$SMB[factor_returns$Date > y]))
})
sd_SMB <- sapply(year, function(y) {
ifelse(y < 2000, NA, sd(factor_returns$SMB[factor_returns$Date > y]))
})
# Print the results
data.frame(year, mean_SMB, sd_SMB)
# Display the results data frame
print(results)
# Save the subset data to a variable
data_for_year <- subset_data_year
print(paste("Processing year:", year))
# Save the subset data to a variable
data_for_year <- subset_data_year
# Assignment related to week 2
# https://nhh.instructure.com/courses/2222/files/352423?wrap=1
# Task 1 ------------------------------------------------------------------
# Open RStudio manually
# Set the working directory
setwd("/Users/sinfjell/Library/CloudStorage/OneDrive-NorgesHandelshøyskole/FIE401/Github")
# Install and load the "plm" package
# installed it in the console with install.packages
library(plm)
# Declare two variables X and Y
X <- rnorm(100)
Y <- rnorm(100)
# Check if variables are in working memory
ls()
# Make a scatterplot
plot(x = X, y = Y)
# Delete variables
rm(X, Y)
# Check if variables are still in memory
ls()
# Task 2 ------------------------------------------------------------------
# Create a vector
my_vector <- 1:100
# Create a dataframe
my_dataframe <- data.frame(digits = my_vector, year = rep(1843, 100), text = "some_text_here")
# Task 3 ------------------------------------------------------------------
# Read the CSV file
factor_returns <- read.csv("factor_returns.csv")
# Save the data
save(factor_returns, file = "factor_returns.RData")
# Write the data as a .txt file
write.table(factor_returns, "factor_returns.txt", sep = "\t")
# Check if files are in the working directory
list.files()
# Task 4 ------------------------------------------------------------------
# Calculate the t-statistic for market returns
t_stat <- (mean(factor_returns$mkt) / sd(factor_returns$mkt)) *
sqrt(length(factor_returns$mkt))
# Print the t-statistic
print(t_stat)
# Interpretation:
# The t_stat is higher than 1.96, which means we can reject the null hypothesis
# that the mean market return is zero at the 5% significance level.
# This suggests that the market returns are significantly positive.
# Therefore, investing in the market portfolio could be a good idea.
# Task 5 ------------------------------------------------------------------
# Task 5: Manipulation
# Load the data
factor_returns <- read.csv("factor_returns.csv")
# Convert the date to numeric for easier filtering
factor_returns$date <- as.numeric(factor_returns$date)
# Extract SMB, mkt, and HML for all days starting from 2000
subset_data <- subset(factor_returns, date >= 20000101)
# Compute t-statistics for SMB
t_stat_smb <- (mean(subset_data$smb) / sd(subset_data$smb)) * sqrt(length(subset_data$smb))
print(paste("t-statistic for SMB: ", t_stat_smb))
# Interpretation: If t_stat_smb is greater than 1.96 or less than -1.96, SMB has significantly positive/negative returns
if (abs(t_stat_smb) > 1.96) {
print("SMB has significantly different returns from zero.")
} else {
print("SMB does not have significantly different returns from zero.")
}
# Compute t-statistics for mkt
t_stat_mkt <- (mean(subset_data$mkt.rf) / sd(subset_data$mkt.rf)) * sqrt(length(subset_data$mkt.rf))
print(paste("t-statistic for mkt: ", t_stat_mkt))
# Interpretation: If t_stat_mkt is greater than 1.96 or less than -1.96, mkt has significantly positive/negative returns
if (abs(t_stat_mkt) > 1.96) {
print("Market has significantly different returns from zero.")
} else {
print("Market does not have significantly different returns from zero.")
}
# Compute t-statistics for HML
t_stat_hml <- (mean(subset_data$hml) / sd(subset_data$hml)) * sqrt(length(subset_data$hml))
print(paste("t-statistic for HML: ", t_stat_hml))
# Interpretation: If t_stat_hml is greater than 1.96 or less than -1.96, HML has significantly positive/negative returns
if (abs(t_stat_hml) > 1.96) {
print("HML has significantly different returns from zero.")
} else {
print("HML does not have significantly different returns from zero.")
}
# Summary statistics
summary(subset_data[, c("smb", "mkt.rf", "hml")])
# Histograms
hist(subset_data$smb, main="Histogram of SMB", xlab="SMB")
hist(subset_data$mkt.rf, main="Histogram of Market Returns", xlab="Market Returns")
hist(subset_data$hml, main="Histogram of HML", xlab="HML")
# Task 6 ------------------------------------------------------------------
# Extract the year from the date, add it to factor_returns
factor_returns$year <- substr(factor_returns$date, 1, 4)
# Initialize an empty data frame to store the results
results <- data.frame(Year=integer(), Mean_SMB=numeric(), SD_SMB=numeric())
for (year in 2000:2005) {
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == as.character(year))
# Save the subset data to a variable
data_for_year <- subset_data_year
print(paste("Processing year:", year))
print(paste("Number of rows:", nrow(data_for_year)))
mean_smb <- mean(data_for_year$smb, na.rm = TRUE)
sd_smb <- sd(data_for_year$smb, na.rm = TRUE)
print(paste("Computed mean_smb for year ", year, ": ", mean_smb))
print(paste("Computed sd_smb for year ", year, ": ", sd_smb))
# Add the results to the results data frame
results <- rbind(results, data.frame(Year=year, Mean_SMB=mean_smb, SD_SMB=sd_smb))
}
# Display the results data frame
print(results)
# Save the subset data to a variable
data_for_year <- subset_data_year
View(data_for_year)
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == as.character(year))
subset_data_year <- subset(factor_returns, factor_returns[["year"]] == as.character(2000))
View(subset_data_year)
View(subset_data_year)
setwd("~/Library/CloudStorage/OneDrive-NorgesHandelshøyskole/FIE401/Github/Week 3")
### Script of the commands from the video lecture ###
#----- Effect of class size on teaching outcome -----
require(dplyr)
# load data after setting your working directory to the folder with the file [use setwd()]
load("School.Rdata")
# inspect data
# summary(School) # use this on your machine
str(School)
# estimate beta.1
y_bar <- mean(School$testscr)
x_bar <- mean(School$str)
beta_hat_1 <- sum((School$str - x_bar)*(School$testscr - y_bar)) / sum((School$str - x_bar)^2)
# estimate beta.2
beta_hat_0 <- mean(School$testscr) - beta_hat_1 * x_bar
# display
beta_hat_0
beta_hat_1
# estimate regression
fit <- lm(testscr ~ str, data = School)
# display result
summary(fit)
# Examination of variation of the variables
summary(School$str)
sd(School$str)
summary(School$testscr)
sd(School$testscr)
# predicted value for str = 16
y_x16 <- fit$coefficients[1] + fit$coefficients[2]*16
# predicted value for str = 19
y_x19 <- fit$coefficients[1] + fit$coefficients[2]*19
# difference
as.numeric(y_x19 - y_x16)
# predicted value for str = 20
y_x20 <- fit$coefficients[1] + fit$coefficients[2]*20
# predicted value for str = 23
y_x23 <- fit$coefficients[1] + fit$coefficients[2]*23
# difference
as.numeric(y_x23 - y_x20)
# Simple way
fit$coefficients[2]*3
# Is this a big effect?
# std x variables
sd(School$str)
# effect on y if x changes by one std
sd(School$str)*fit$coefficients[2]
# std y var
sd(School$testscr)
# effect on y if x changes by one std expressed
# in std of the dependent var
sd(School$str)*fit$coefficients[2] / sd(School$testscr)
### Binary regressor
# define small class size
School <- mutate(School, small = str < 20)
# School$small <- School$str < 20 # alternative code
# estimate regression
fit.bin <- lm(testscr ~ small, data = School)
# display result
fit.bin$coefficients
### Goodness of fit
# extract from lm output
summary(fit)$r.squared
# compute yourself
var(fit$fitted.values) / var(fit$residuals + fit$fitted.values)
# load data after setting your working directory to the folder with the file [use setwd()]
load("School.Rdata")
# inspect data
# summary(School) # use this on your machine
str(School)
# inspect data
# summary(School) # use this on your machine
str(School)
# estimate beta.1
y_bar <- mean(School$testscr)
x_bar <- mean(School$str)
beta_hat_1 <- sum((School$str - x_bar)*(School$testscr - y_bar)) / sum((School$str - x_bar)^2)
# estimate beta.2
beta_hat_0 <- mean(School$testscr) - beta_hat_1 * x_bar
# display
beta_hat_0
beta_hat_1
# estimate regression
fit <- lm(testscr ~ str, data = School)
# display result
summary(fit)
# Examination of variation of the variables
summary(School$str)
sd(School$str)
summary(School$testscr)
sd(School$testscr)
# predicted value for str = 16
y_x16 <- fit$coefficients[1] + fit$coefficients[2]*16
# predicted value for str = 19
y_x19 <- fit$coefficients[1] + fit$coefficients[2]*19
# difference
as.numeric(y_x19 - y_x16)
# predicted value for str = 20
y_x20 <- fit$coefficients[1] + fit$coefficients[2]*20
# predicted value for str = 23
y_x23 <- fit$coefficients[1] + fit$coefficients[2]*23
# difference
as.numeric(y_x23 - y_x20)
# Simple way
fit$coefficients[2]*3
# Is this a big effect?
# std x variables
sd(School$str)
# effect on y if x changes by one std
sd(School$str)*fit$coefficients[2]
# std y var
sd(School$testscr)
# effect on y if x changes by one std expressed
# in std of the dependent var
sd(School$str)*fit$coefficients[2] / sd(School$testscr)
### Binary regressor
# define small class size
School <- mutate(School, small = str < 20)
# estimate regression
fit.bin <- lm(testscr ~ small, data = School)
# display result
fit.bin$coefficients
setwd("~/Library/CloudStorage/OneDrive-NorgesHandelshøyskole/FIE401/Github/Week 3")
# installing libraries
library(dplyr)
fin_data <- read.csv(Data_lab_simple_regression.csv)
fin_data <- read.csv("Data_lab_simple_regression.csv")
# Task 1 ------------------------------------------------------------------
str(data)
summary(data)
summary(data)
summary(fin_data)
# Task 1 ------------------------------------------------------------------
str(fin_data)
# Task 1 ------------------------------------------------------------------
str(fin_data)
summary(fin_data)
# Load necessary libraries
library(ggplot2)
# Use the built-in mtcars dataset
data(mtcars)
# View the first few rows of the data
head(mtcars)
# Perform linear regression to predict 'mpg' based on 'wt'
linear_model <- lm(mpg ~ wt, data = mtcars)
# Display the summary of the model to see coefficients and statistics
summary(linear_model)
# Create a scatter plot and add the regression line
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +  # Scatter plot
geom_smooth(method = "lm", se = FALSE) +  # Regression line
ggtitle("Linear Regression: MPG vs Weight") +
xlab("Weight") +
ylab("Miles per Gallon")
# Predict mpg for a car with weight 3.0
predicted_mpg <- predict(linear_model, newdata = data.frame(wt = 3.0))
print(paste("Predicted mpg for a car with weight 3.0:", round(predicted_mpg, 2)))
# Perform linear regression to predict 'mpg' based on 'wt'
linear_model <- lm(mpg ~ wt, data = mtcars)
View(linear_model)
# Display the summary of the model to see coefficients and statistics
summary(linear_model)
# Display the summary of the model to see coefficients and statistics
summary(linear_model)
